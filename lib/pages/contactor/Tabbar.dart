import 'dart:convert';
import 'package:agri_booking2/pages/contactor/PlanAndHistory.dart';
import 'package:agri_booking2/pages/contactor/home.dart';
import 'package:agri_booking2/pages/contactor/nonti.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class TabbarCar extends StatefulWidget {
  final int value;
  final dynamic mid;
  final int month;
  final int year;

  const TabbarCar({
    super.key,
    required this.value,
    required this.mid,
    required this.month,
    required this.year,
  });

  @override
  State<TabbarCar> createState() => _TabbarCarState();
}

class _TabbarCarState extends State<TabbarCar> {
  late int value;
  late Widget currentPage;
  late int _displayMonth;
  late int _displayYear;
  int _notificationCount = 0;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _displayMonth = widget.month;
    _displayYear = widget.year;
    value = widget.value;
    switchPage(value);
    fetchData(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fetchData ‡πÉ‡∏ô initState
  }

  void switchPage(int index) {
    setState(() {
      value = index;
      if (index == 0) {
        currentPage = PlanAndHistory(
          mid: widget.mid,
          month: widget.month,
          year: widget.year,
        );
      } else if (index == 1) {
        fetchData();
        currentPage = NontiPage(mid: widget.mid);
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fetchData ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
      } else if (index == 2) {
        currentPage = HomePage(mid: widget.mid);
      }
    });
  }

  // üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç fetchData() ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Async ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  Future<void> fetchData() async {
    // üí° ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ isLoading ‡πÄ‡∏õ‡πá‡∏ô true ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î
    setState(() {
      _isLoading = true;
    });

    try {
      // üí° ‡πÉ‡∏ä‡πâ await ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å fetchSchedule
      final schedules = await fetchSchedule(widget.mid);

      // üí° ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
      final nonConfirmedSchedules = schedules.where((item) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ progress_status ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠ null (‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô)
        return item['progress_status'] == null ||
            item['progress_status'] == '0';
      }).toList();

      // üí° ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      setState(() {
        _notificationCount = nonConfirmedSchedules.length;
        _isLoading = false;
      });
    } catch (e) {
      print('Error fetching schedule: $e');
      setState(() {
        _isLoading = false;
        _notificationCount = 0; // ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0
      });
    }
  }

  Future<List<dynamic>> fetchSchedule(int mid) async {
    print("Fetching schedule for mid: $mid");
    final url = Uri.parse(
        'http://projectnodejs.thammadalok.com/AGribooking/get_ConReservingNonti/$mid');
    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        if (response.body.isNotEmpty) {
          return jsonDecode(response.body);
        } else {
          return [];
        }
      } else {
        throw Exception('Failed to load schedule: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Connection error: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: currentPage,
      bottomNavigationBar: BottomNavigationBar(
        backgroundColor: Colors.white,
        currentIndex: value,
        items: [
          const BottomNavigationBarItem(
            icon: Icon(Icons.calendar_today),
            label: '‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô',
          ),
          BottomNavigationBarItem(
            icon: Badge(
              // ‡πÉ‡∏ä‡πâ Widget Badge ‡∏´‡∏∏‡πâ‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
              isLabelVisible: _notificationCount > 0 && !_isLoading,
              label: Text('$_notificationCount'),
              child: const Icon(Icons.chat),
            ),
            label: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
          ),
          const BottomNavigationBarItem(
            icon: Icon(Icons.person),
            label: '‡∏â‡∏±‡∏ô',
          ),
        ],
        onTap: switchPage,
        selectedItemColor: const Color(0xFFEF6C00),
        unselectedItemColor: Colors.black,
      ),
    );
  }
}
