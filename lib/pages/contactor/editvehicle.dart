import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:http/http.dart' as http;

class EditVehicle extends StatefulWidget {
  final Map<String, dynamic>? initialVehicleData;

  const EditVehicle({
    super.key,
    this.initialVehicleData,
  });

  @override
  State<EditVehicle> createState() => _EditVehicleState();
}

class _EditVehicleState extends State<EditVehicle> {
  final _formKey = GlobalKey<FormState>();

  final TextEditingController nameController = TextEditingController();
  final TextEditingController priceController = TextEditingController();
  final TextEditingController unitPriceController = TextEditingController();
  final TextEditingController detailController = TextEditingController();
  final TextEditingController plateController = TextEditingController();

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î style ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  final TextStyle labelStyle = const TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.w600,
    color: Colors.black87,
  );

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î style ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
  final TextStyle cancelButtonTextStyle = TextStyle(
    color: Colors.grey[800],
    fontWeight: FontWeight.w600,
  );

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î style ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏ñ
  static const TextStyle submitButtonTextStyle = TextStyle(
    color: Colors.white,
    fontWeight: FontWeight.w600,
  );

  String? imageUrl;
  bool isLoading = false;

  final ImagePicker picker = ImagePicker();

  late int _currentVid;
  late int _currentMid;

  String? selectedUnit;
  final TextEditingController customUnitController = TextEditingController();

  @override
  void initState() {
    super.initState();
    if (widget.initialVehicleData != null) {
      _populateFields(widget.initialVehicleData!);

      _currentVid = widget.initialVehicleData!['vid'] ?? 0;
      _currentMid = widget.initialVehicleData!['mid'] ?? 0;

      // ‡πÇ‡∏´‡∏•‡∏î unit_price ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ set ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô dropdown
      String unit = widget.initialVehicleData!['unit_price'] ?? '';
      if (['‡πÑ‡∏£‡πà', '‡∏ß‡∏±‡∏ô', '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á', '‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤'].contains(unit)) {
        selectedUnit = unit;
      } else if (unit.isNotEmpty) {
        selectedUnit = '‡∏≠‡∏∑‡πà‡∏ô‡πÜ';
        customUnitController.text = unit;
        unitPriceController.text = unit;
      }
    } else {
      print("Error: initialVehicleData is null in EditVehicle.");
      _currentVid = 0;
      _currentMid = 0;
    }
  }

  void _populateFields(Map<String, dynamic> data) {
    nameController.text = data['name_vehicle'] ?? '';
    priceController.text = data['price']?.toString() ?? '';
    unitPriceController.text = data['unit_price'] ?? '';
    detailController.text = data['detail'] ?? '';
    plateController.text = data['plate_number'] ?? '';
    imageUrl = data['image_vehicle'];
  }

  Future<void> pickAndUploadImage() async {
    final pickedFile = await picker.pickImage(source: ImageSource.gallery);
    if (pickedFile == null) return;

    setState(() => isLoading = true);

    try {
      final bytes = await pickedFile.readAsBytes();
      final base64Image = base64Encode(bytes);

      const apiKey = 'a051ad7a04e7037b74d4d656e7d667e9';
      final url = Uri.parse('https://api.imgbb.com/1/upload?key=$apiKey');

      final response = await http.post(url, body: {'image': base64Image});

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        setState(() {
          imageUrl = data['data']['url'];
        });
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')),
        );
      } else {
        throw Exception('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.body}');
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: $e')),
      );
    } finally {
      setState(() => isLoading = false);
    }
  }

  Future<void> updateVehicle() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => isLoading = true);

    final data = {
      "vid": _currentVid,
      "name_vehicle": nameController.text,
      "price": int.tryParse(priceController.text) ?? 0,
      "unit_price": selectedUnit == '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
          ? customUnitController.text
          : (selectedUnit ?? ''),
      "image": imageUrl,
      "detail": detailController.text,
      "plate_number":
          plateController.text.isEmpty ? null : plateController.text,
    };

    try {
      final url = Uri.parse(
          'http://projectnodejs.thammadalok.com/AGribooking/update_vehicle');
      final response = await http.put(
        url,
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode(data),
      );

      print('Response status: ${response.statusCode}');
      print('Response body: ${response.body}');

      // if (response.statusCode == 200) {
      //   showDialog(
      //     context: context,
      //     builder: (_) => AlertDialog(
      //       title: const Text('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'),
      //       content: const Text('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß'),
      //       actions: [
      //         TextButton(
      //           onPressed: () {
      //             Navigator.pop(context);
      //             Navigator.pushReplacement(
      //               context,
      //               MaterialPageRoute(
      //                 builder: (context) => Detailvehicle(vid: _currentVid),
      //               ),
      //             );
      //           },
      //           child: const Text('‡∏ï‡∏Å‡∏•‡∏á'),
      //         ),
      //       ],
      //     ),
      //   );
      // }
      if (response.statusCode == 200) {
        showDialog(
          context: context,
          builder: (_) => AlertDialog(
            title: const Text('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'),
            content: const Text('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß'),
            actions: [
              TextButton(
                onPressed: () {
                  Navigator.pop(context); // ‡∏õ‡∏¥‡∏î Dialog ‡∏Å‡πà‡∏≠‡∏ô
                  Navigator.pop(
                      context, true); // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ true
                },
                child: const Text('‡∏ï‡∏Å‡∏•‡∏á'),
              ),
            ],
          ),
        );
      } else {
        throw Exception('‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ${response.body}');
      }
    } catch (e) {
      print('Error updating vehicle: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡πÑ‡∏î‡πâ: $e')),
      );
    } finally {
      setState(() => isLoading = false);
    }
  }

  @override
  void dispose() {
    customUnitController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color.fromARGB(255, 255, 217, 180),
      appBar: AppBar(
        //backgroundColor: const Color.fromARGB(255, 255, 158, 60),
        backgroundColor: const Color.fromARGB(255, 18, 143, 9),
        centerTitle: true,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () => Navigator.pop(context, true),
        ),
        title: const Text(
          '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á',
          style: TextStyle(
            fontSize: 22,
            fontWeight: FontWeight.bold,
            color: Color.fromARGB(255, 255, 255, 255),
            shadows: [
              Shadow(
                color: Color.fromARGB(115, 253, 237, 237),
                blurRadius: 3,
                offset: Offset(1.5, 1.5),
              ),
            ],
          ),
        ),
      ),
      body: Stack(
        children: [
          // ‚úÖ ‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
          // Positioned.fill(
          //   child: Image.network(
          //     'https://i.ibb.co/FbG6mQrF/Rectangle-33-1.png', // üîó ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ
          //     fit: BoxFit.cover,
          //   ),
          // ),

          // ‚úÖ ‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å
          SafeArea(
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(16),
              child: Column(
                children: [
                  // ‚úÖ AppBar ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
                  // Row(
                  //   children: [
                  //     IconButton(
                  //       icon: const Icon(Icons.arrow_back, color: Colors.white),
                  //       onPressed: () => Navigator.pop(context, true),
                  //     ),
                  //     const Spacer(),
                  //     const Text(
                  //       '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ',
                  //       style: TextStyle(
                  //         fontSize: 22,
                  //         fontWeight: FontWeight.bold,
                  //         color: Colors.white,
                  //         shadows: [
                  //           Shadow(
                  //             color: Color.fromARGB(115, 0, 0, 0),
                  //             blurRadius: 4,
                  //             offset: Offset(1, 1),
                  //           ),
                  //         ],
                  //       ),
                  //     ),
                  //     const Spacer(),
                  //   ],
                  // ),
                  // const SizedBox(height: 16),

                  // ‚úÖ Card ‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
                  Card(
                    color: Colors.white.withOpacity(0.85), // ‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
                    elevation: 8,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(16),
                    ),
                    child: Padding(
                      padding: const EdgeInsets.all(20),
                      child: Form(
                        key: _formKey,
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.stretch,
                          children: [
                            // ‚¨áÔ∏è (‡πÉ‡∏™‡πà‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏π‡∏õ‡∏£‡∏ñ, TextFormField, Dropdown, ‡∏õ‡∏∏‡πà‡∏° ‡∏Ø‡∏•‡∏Ø)
                            // ‚úÖ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û + ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
                            Center(
                              child: Column(
                                children: [
                                  Stack(
                                    children: [
                                      CircleAvatar(
                                        radius: 50,
                                        backgroundColor: Colors.grey[300],
                                        backgroundImage: imageUrl != null &&
                                                imageUrl!.isNotEmpty
                                            ? NetworkImage(imageUrl!)
                                            : null,
                                        child: imageUrl == null ||
                                                imageUrl!.isEmpty
                                            ? Icon(Icons.directions_car,
                                                size: 60,
                                                color: Colors.grey[600])
                                            : null,
                                      ),
                                      Positioned(
                                        bottom: 0,
                                        right: 0,
                                        child: CircleAvatar(
                                          backgroundColor: Colors.green[700],
                                          radius: 18,
                                          child: IconButton(
                                            icon: const Icon(Icons.edit,
                                                color: Colors.white, size: 20),
                                            onPressed: isLoading
                                                ? null
                                                : pickAndUploadImage,
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                  const SizedBox(height: 8),
                                  Text('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ‡∏£‡∏ñ', style: labelStyle),
                                ],
                              ),
                            ),

                            const SizedBox(height: 24),

                            // ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏ñ
                            Text('‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏ñ', style: labelStyle),
                            const SizedBox(height: 8),
                            TextFormField(
                              controller: nameController,
                              decoration: const InputDecoration(
                                filled: true, // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
                                fillColor:
                                    Colors.white, // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
                                border: OutlineInputBorder(),
                                hintText: '‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏ñ',
                                contentPadding: EdgeInsets.symmetric(
                                    horizontal: 12, vertical: 8),
                              ),
                              validator: (v) => v == null || v.isEmpty
                                  ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏ñ'
                                  : null,
                            ),
                            const SizedBox(height: 16),

                            // ‡∏£‡∏≤‡∏Ñ‡∏≤ + ‡∏´‡∏ô‡πà‡∏ß‡∏¢
                            Text('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏à‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 100 ‡∏ö‡∏≤‡∏ó/‡πÑ‡∏£‡πà)',
                                style: labelStyle),
                            const SizedBox(height: 8),
                            Row(
                              children: [
                                Expanded(
                                  child: TextFormField(
                                    controller: priceController,
                                    keyboardType: TextInputType.number,
                                    decoration: const InputDecoration(
                                      filled: true, // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
                                      fillColor: Colors
                                          .white, // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
                                      border: OutlineInputBorder(),
                                      //hintText: '500',
                                      contentPadding: EdgeInsets.symmetric(
                                          horizontal: 12, vertical: 8),
                                    ),
                                    validator: (v) => v == null || v.isEmpty
                                        ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤'
                                        : null,
                                  ),
                                ),
                                const SizedBox(width: 16),
                                Text('‡∏ö‡∏≤‡∏ó/',
                                    style: Theme.of(context)
                                        .textTheme
                                        .titleMedium),
                                const SizedBox(width: 16),
                                Expanded(
                                  child: DropdownButtonFormField<String>(
                                    initialValue: selectedUnit ?? '‡πÑ‡∏£‡πà',
                                    decoration: const InputDecoration(
                                      filled: true, // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
                                      fillColor: Colors
                                          .white, // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
                                      border: OutlineInputBorder(),
                                      contentPadding: EdgeInsets.symmetric(
                                          horizontal: 12, vertical: 8),
                                    ),
                                    items: [
                                      '‡πÑ‡∏£‡πà',
                                      '‡∏ß‡∏±‡∏ô',
                                      '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
                                      '‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤',
                                      '‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
                                    ].map((unit) {
                                      return DropdownMenuItem<String>(
                                        value: unit,
                                        child: Text(unit),
                                      );
                                    }).toList(),
                                    onChanged: (value) {
                                      setState(() {
                                        selectedUnit = value;
                                        if (value != '‡∏≠‡∏∑‡πà‡∏ô‡πÜ') {
                                          unitPriceController.text = value!;
                                        } else {
                                          unitPriceController.clear();
                                        }
                                      });
                                    },
                                    validator: (v) => v == null || v.isEmpty
                                        ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢'
                                        : null,
                                  ),
                                ),
                              ],
                            ),

                            if (selectedUnit == '‡∏≠‡∏∑‡πà‡∏ô‡πÜ') ...[
                              const SizedBox(height: 16),
                              TextFormField(
                                controller: customUnitController,
                                decoration: const InputDecoration(
                                  filled: true, // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
                                  fillColor: Colors
                                      .white, // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
                                  border: OutlineInputBorder(),
                                  hintText: '‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏°‡∏ï‡∏£',
                                  contentPadding: EdgeInsets.symmetric(
                                      horizontal: 12, vertical: 8),
                                ),
                                validator: (v) {
                                  if (selectedUnit == '‡∏≠‡∏∑‡πà‡∏ô‡πÜ' &&
                                      (v == null || v.isEmpty)) {
                                    return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢';
                                  }
                                  return null;
                                },
                                onChanged: (value) {
                                  unitPriceController.text = value;
                                },
                              ),
                            ],

                            const SizedBox(height: 16),

                            // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                            Text('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏ñ', style: labelStyle),
                            const SizedBox(height: 8),
                            TextFormField(
                              controller: detailController,
                              maxLines: 3,
                              decoration: const InputDecoration(
                                filled: true, // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
                                fillColor:
                                    Colors.white, // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
                                border: OutlineInputBorder(),
                                hintText:
                                    '‡∏ï‡∏±‡∏î‡∏´‡∏ç‡πâ‡∏≤ ‡∏Ç‡∏∏‡∏î‡∏î‡∏¥‡∏ô ‡∏à‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô10‡πÑ‡∏£‡πà ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà1000‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡πÑ‡∏£‡πà',
                                contentPadding: EdgeInsets.symmetric(
                                    horizontal: 12, vertical: 8),
                              ),
                              // validator: (v) => v == null || v.isEmpty
                              //     ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'
                              //     : null,
                            ),
                            const SizedBox(height: 16),

                            // ‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ
                            Text('‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ', style: labelStyle),
                            const SizedBox(height: 8),
                            TextFormField(
                              controller: plateController,
                              decoration: const InputDecoration(
                                filled: true, // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
                                fillColor:
                                    Colors.white, // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
                                border: OutlineInputBorder(),
                                hintText: '',
                                contentPadding: EdgeInsets.symmetric(
                                    horizontal: 12, vertical: 8),
                              ),
                            ),
                            const SizedBox(height: 32),

                            // üìå ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î: ‡∏õ‡∏∏‡πà‡∏°
                            Row(
                              children: [
                                // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                                Expanded(
                                  child: ElevatedButton.icon(
                                    label: Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
                                        style: cancelButtonTextStyle),
                                    onPressed: isLoading
                                        ? null
                                        : () => Navigator.pop(context, false),
                                    style: ElevatedButton.styleFrom(
                                      backgroundColor: Colors.grey[200],
                                      elevation: 2,
                                      padding: const EdgeInsets.symmetric(
                                          vertical: 14),
                                      shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.circular(12),
                                      ),
                                    ),
                                  ),
                                ),
                                const SizedBox(width: 16),
                                // ‡∏ï‡∏Å‡∏•‡∏á
                                Expanded(
                                  child: ElevatedButton.icon(
                                    label: const Text('‡∏ï‡∏Å‡∏•‡∏á',
                                        style: submitButtonTextStyle),
                                    onPressed: isLoading ? null : updateVehicle,
                                    style: ElevatedButton.styleFrom(
                                      backgroundColor: Colors.green[700],
                                      elevation: 3,
                                      padding: const EdgeInsets.symmetric(
                                          vertical: 14),
                                      shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.circular(12),
                                      ),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                            if (isLoading)
                              const Padding(
                                padding: EdgeInsets.all(8),
                                child:
                                    Center(child: CircularProgressIndicator()),
                              ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  // @override
  // Widget build(BuildContext context) {
  //   return Scaffold(
  //     backgroundColor: Color.fromARGB(255, 255, 240, 195),
  //     appBar: AppBar(
  //       backgroundColor: const Color.fromARGB(255, 255, 158, 60),
  //       centerTitle: true, // ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
  //       title: Text(
  //         '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ #${_currentVid}',
  //         style: const TextStyle(
  //           fontSize: 22,
  //           fontWeight: FontWeight.bold,
  //           color: Color.fromARGB(255, 255, 255, 255),
  //           //letterSpacing: 1,
  //           shadows: [
  //             Shadow(
  //               color: Color.fromARGB(115, 253, 237, 237),
  //               blurRadius: 3,
  //               offset: Offset(1.5, 1.5),
  //             ),
  //           ],
  //         ),
  //       ),
  //       iconTheme: const IconThemeData(
  //         color: Colors.white, // ‚úÖ ‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
  //       ),
  //       leading: IconButton(
  //         icon: const Icon(Icons.arrow_back),
  //         onPressed: () {
  //           Navigator.pop(context, true);
  //         },
  //       ),
  //     ),
  //     body: SingleChildScrollView(
  //       padding: const EdgeInsets.all(16),
  //       child: Form(
  //         key: _formKey,
  //         child: Column(
  //           crossAxisAlignment: CrossAxisAlignment.stretch,
  //           children: [
  //             // ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  //             Center(
  //               child: Column(
  //                 children: [
  //                   Stack(
  //                     children: [
  //                       CircleAvatar(
  //                         radius: 50,
  //                         backgroundColor: Colors.grey[300],
  //                         backgroundImage:
  //                             imageUrl != null && imageUrl!.isNotEmpty
  //                                 ? NetworkImage(imageUrl!)
  //                                 : null,
  //                         child: imageUrl == null || imageUrl!.isEmpty
  //                             ? Icon(Icons.directions_car,
  //                                 size: 60, color: Colors.grey[600])
  //                             : null,
  //                       ),
  //                       Positioned(
  //                         bottom: 0,
  //                         right: 0,
  //                         child: CircleAvatar(
  //                           backgroundColor: Colors.green[700],
  //                           radius: 18,
  //                           child: IconButton(
  //                             icon: const Icon(Icons.edit,
  //                                 color: Colors.white, size: 20),
  //                             onPressed: isLoading ? null : pickAndUploadImage,
  //                           ),
  //                         ),
  //                       ),
  //                     ],
  //                   ),
  //                   const SizedBox(height: 8),
  //                   Text('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ‡∏£‡∏ñ', style: labelStyle),
  //                 ],
  //               ),
  //             ),
  //             const SizedBox(height: 24),

  //             // ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏ñ
  //             Text('‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏ñ', style: labelStyle),
  //             const SizedBox(height: 8),
  //             TextFormField(
  //               controller: nameController,
  //               decoration: const InputDecoration(
  //                 filled: true, // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
  //                 fillColor: Colors.white, // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
  //                 border: OutlineInputBorder(),
  //                 hintText: '‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏ñ',
  //                 contentPadding:
  //                     EdgeInsets.symmetric(horizontal: 12, vertical: 8),
  //               ),
  //               validator: (v) =>
  //                   v == null || v.isEmpty ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏ñ' : null,
  //             ),
  //             const SizedBox(height: 16),

  //             // ‡∏£‡∏≤‡∏Ñ‡∏≤ + ‡∏´‡∏ô‡πà‡∏ß‡∏¢
  //             Text('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏à‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 100 ‡∏ö‡∏≤‡∏ó/‡πÑ‡∏£‡πà)',
  //                 style: labelStyle),
  //             const SizedBox(height: 8),
  //             Row(
  //               children: [
  //                 Expanded(
  //                   child: TextFormField(
  //                     controller: priceController,
  //                     keyboardType: TextInputType.number,
  //                     decoration: const InputDecoration(
  //                       filled: true, // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
  //                       fillColor: Colors.white, // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
  //                       border: OutlineInputBorder(),
  //                       hintText: '500',
  //                       contentPadding:
  //                           EdgeInsets.symmetric(horizontal: 12, vertical: 8),
  //                     ),
  //                     validator: (v) =>
  //                         v == null || v.isEmpty ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤' : null,
  //                   ),
  //                 ),
  //                 const SizedBox(width: 16),
  //                 Text('‡∏ö‡∏≤‡∏ó/', style: Theme.of(context).textTheme.titleMedium),
  //                 const SizedBox(width: 16),
  //                 Expanded(
  //                   child: DropdownButtonFormField<String>(
  //                     value: selectedUnit ?? '‡πÑ‡∏£‡πà',
  //                     decoration: const InputDecoration(
  //                       filled: true, // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
  //                       fillColor: Colors.white, // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
  //                       border: OutlineInputBorder(),
  //                       contentPadding:
  //                           EdgeInsets.symmetric(horizontal: 12, vertical: 8),
  //                     ),
  //                     items: [
  //                       '‡πÑ‡∏£‡πà',
  //                       '‡∏ß‡∏±‡∏ô',
  //                       '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
  //                       '‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤',
  //                       '‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
  //                     ].map((unit) {
  //                       return DropdownMenuItem<String>(
  //                         value: unit,
  //                         child: Text(unit),
  //                       );
  //                     }).toList(),
  //                     onChanged: (value) {
  //                       setState(() {
  //                         selectedUnit = value;
  //                         if (value != '‡∏≠‡∏∑‡πà‡∏ô‡πÜ') {
  //                           unitPriceController.text = value!;
  //                         } else {
  //                           unitPriceController.clear();
  //                         }
  //                       });
  //                     },
  //                     validator: (v) =>
  //                         v == null || v.isEmpty ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢' : null,
  //                   ),
  //                 ),
  //               ],
  //             ),

  //             if (selectedUnit == '‡∏≠‡∏∑‡πà‡∏ô‡πÜ') ...[
  //               const SizedBox(height: 16),
  //               TextFormField(
  //                 controller: customUnitController,
  //                 decoration: const InputDecoration(
  //                   filled: true, // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
  //                   fillColor: Colors.white, // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
  //                   border: OutlineInputBorder(),
  //                   hintText: '‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏°‡∏ï‡∏£',
  //                   contentPadding:
  //                       EdgeInsets.symmetric(horizontal: 12, vertical: 8),
  //                 ),
  //                 validator: (v) {
  //                   if (selectedUnit == '‡∏≠‡∏∑‡πà‡∏ô‡πÜ' && (v == null || v.isEmpty)) {
  //                     return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢';
  //                   }
  //                   return null;
  //                 },
  //                 onChanged: (value) {
  //                   unitPriceController.text = value;
  //                 },
  //               ),
  //             ],

  //             const SizedBox(height: 16),

  //             // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  //             Text('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏ñ', style: labelStyle),
  //             const SizedBox(height: 8),
  //             TextFormField(
  //               controller: detailController,
  //               maxLines: 3,
  //               decoration: const InputDecoration(
  //                 filled: true, // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
  //                 fillColor: Colors.white, // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
  //                 border: OutlineInputBorder(),
  //                 hintText:
  //                     '‡∏ï‡∏±‡∏î‡∏´‡∏ç‡πâ‡∏≤ ‡∏Ç‡∏∏‡∏î‡∏î‡∏¥‡∏ô ‡∏à‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô10‡πÑ‡∏£‡πà ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà1000‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡πÑ‡∏£‡πà',
  //                 contentPadding:
  //                     EdgeInsets.symmetric(horizontal: 12, vertical: 8),
  //               ),
  //               validator: (v) =>
  //                   v == null || v.isEmpty ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î' : null,
  //             ),
  //             const SizedBox(height: 16),

  //             // ‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ
  //             Text('‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ', style: labelStyle),
  //             const SizedBox(height: 8),
  //             TextFormField(
  //               controller: plateController,
  //               decoration: const InputDecoration(
  //                 filled: true, // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
  //                 fillColor: Colors.white, // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
  //                 border: OutlineInputBorder(),
  //                 hintText: '',
  //                 contentPadding:
  //                     EdgeInsets.symmetric(horizontal: 12, vertical: 8),
  //               ),
  //             ),
  //             const SizedBox(height: 32),

  //             Row(
  //               children: [
  //                 // üî¥ ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
  //                 Expanded(
  //                   child: ElevatedButton.icon(
  //                     icon: const Icon(Icons.close, color: Colors.black87),
  //                     label: Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', style: cancelButtonTextStyle),
  //                     onPressed: isLoading
  //                         ? null
  //                         : () => Navigator.pop(context, false),
  //                     style: ElevatedButton.styleFrom(
  //                       backgroundColor: Colors.grey[200], // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡∏∏‡πà‡∏°
  //                       elevation: 2, // ‡πÄ‡∏á‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
  //                       padding: const EdgeInsets.symmetric(vertical: 14),
  //                       shape: RoundedRectangleBorder(
  //                         borderRadius: BorderRadius.circular(12),
  //                       ),
  //                     ),
  //                   ),
  //                 ),

  //                 const SizedBox(width: 16),

  //                 // ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏Å‡∏•‡∏á
  //                 Expanded(
  //                   child: ElevatedButton.icon(
  //                     icon: const Icon(Icons.check, color: Colors.white),
  //                     label: const Text('‡∏ï‡∏Å‡∏•‡∏á', style: submitButtonTextStyle),
  //                     onPressed: isLoading ? null : updateVehicle,
  //                     style: ElevatedButton.styleFrom(
  //                       backgroundColor: Colors.green[700],
  //                       elevation: 3,
  //                       padding: const EdgeInsets.symmetric(vertical: 14),
  //                       shape: RoundedRectangleBorder(
  //                         borderRadius: BorderRadius.circular(12),
  //                       ),
  //                     ),
  //                   ),
  //                 ),
  //               ],
  //             ),

  //             if (isLoading)
  //               const Padding(
  //                 padding: EdgeInsets.all(8.0),
  //                 child: Center(child: CircularProgressIndicator()),
  //               ),
  //           ],
  //         ),
  //       ),
  //     ),
  //   );
  // }
}
