import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:http/http.dart' as http;
import 'package:latlong2/latlong.dart';
import 'package:url_launcher/url_launcher.dart';

class DetailWorkPage extends StatefulWidget {
  final int rsid;
  const DetailWorkPage({super.key, required this.rsid});
  @override
  State<DetailWorkPage> createState() => _DetailWorkPageState();
}

class _DetailWorkPageState extends State<DetailWorkPage> {
  Map<String, dynamic>? data;
  int? progress_status; // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô null
  List<LatLng> _routePoints = [];
  double? _distanceInKm;

  @override
  void initState() {
    super.initState();
    fetchDetail();
  }

  Future<void> fetchDetail() async {
    final url = Uri.parse(
        'http://projectnodejs.thammadalok.com/AGribooking/get_DetailReserving/${widget.rsid}');
    final response = await http.get(url);
    print(response);
    if (response.statusCode == 200) {
      final List<dynamic> jsonList = jsonDecode(response.body);
      setState(() {
        data = jsonList.first;
        progress_status = data!['progress_status'];
      });

      // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å ORS
      try {
        final route = await getRouteFromORS(
          data!['contractor_latitude'],
          data!['contractor_longitude'],
          data!['latitude'],
          data!['longitude'],
        );
        setState(() {
          _routePoints = route;
        });
      } catch (e) {
        print('Error loading route: $e');
        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏à‡∏∞‡∏¢‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡πá‡πÑ‡∏î‡πâ
      }
    }
  }

  Widget buildButtons() {
    if (progress_status == null) {
      // progress_status == null ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
      return Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          ElevatedButton(
            onPressed: () => _updateProgress(0), // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
          ),
          const SizedBox(width: 20),
          ElevatedButton(
            onPressed: () => _updateProgress(1), // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
            style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
            child: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô'),
          ),
        ],
      );
    }
    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô status ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    else if (progress_status == 1 ||
        progress_status == 2 ||
        progress_status == 3) {
      // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      return Wrap(
        spacing: 8,
        children: [
          ElevatedButton(
            onPressed: () => _updateProgress(2),
            child: const Text('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á'),
          ),
          ElevatedButton(
            onPressed: () => _updateProgress(3),
            child: const Text('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô'),
          ),
          ElevatedButton(
            onPressed: () => _updateProgress(4),
            child: const Text('‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'),
          ),
        ],
      );
    } else {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ
      return const Text('‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    }
  }

  Future<void> _updateProgress(int newStatus) async {
    // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'),
          content: Text('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô $newStatus ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?'),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
            ),
            TextButton(
              onPressed: () => Navigator.of(context).pop(true),
              child: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô'),
            ),
          ],
        );
      },
    );

    if (confirmed != true) return;

    final url = Uri.parse(
        'http://projectnodejs.thammadalok.com/AGribooking/update_progress');
    try {
      final response = await http.put(
        url,
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'rsid': widget.rsid, 'progress_status': newStatus}),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(data['message'] ?? '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')),
        );
        // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤
        await fetchDetail(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e')),
      );
    }
  }

  Future<List<LatLng>> getRouteFromORS(
    double startLat,
    double startLng,
    double endLat,
    double endLng,
  ) async {
    final apiKey =
        'eyJvcmciOiI1YjNjZTM1OTc4NTExMTAwMDFjZjYyNDgiLCJpZCI6ImMyOWE5ZDkxMmUyZDQzMDc4ODNlZWQ0MjQzZDQ2NTk1IiwiaCI6Im11cm11cjY0In0='; // <-- ‡πÉ‡∏™‡πà API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    final url = Uri.parse(
      'https://api.openrouteservice.org/v2/directions/driving-car?api_key=$apiKey&start=$startLng,$startLat&end=$endLng,$endLat',
    );

    final response = await http.get(url);
    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);

      // üìç ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å response (‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏ï‡∏£)
      final distanceMeters =
          data['features'][0]['properties']['segments'][0]['distance'];
      setState(() {
        _distanceInKm = (distanceMeters / 1000); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
      });

      // üìç ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
      List coords = data['features'][0]['geometry']['coordinates'];
      return coords.map<LatLng>((c) => LatLng(c[1], c[0])).toList();
    } else {
      throw Exception('Failed to load route from ORS');
    }
  }

  void _openInGoogleMaps(double lat, double lng) async {
    final Uri url =
        Uri.parse('https://www.google.com/maps/search/?api=1&query=$lat,$lng');
    if (await canLaunchUrl(url)) {
      await launchUrl(url, mode: LaunchMode.externalApplication);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î Google Maps ‡πÑ‡∏î‡πâ')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Color(0xFFFFCC99),
        title: const Text('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô'),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.pop(context); // ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
          },
        ),
      ),
      body: data == null
          ? const Center(child: CircularProgressIndicator())
          : Stack(
              children: [
                // üó∫ ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á
                FlutterMap(
                  options: MapOptions(
                    center: LatLng(data!['latitude'], data!['longitude']),
                    zoom: 14,
                  ),
                  children: [
                    TileLayer(
                      urlTemplate:
                          'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
                      subdomains: ['a', 'b', 'c'],
                      userAgentPackageName: 'com.example.yourapp',
                    ),
                    MarkerLayer(
                      markers: [
                        Marker(
                          point: LatLng(data!['contractor_latitude'],
                              data!['contractor_longitude']),
                          width: 40, // ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
                          height: 40, // ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
                          child: Icon(Icons.location_on, color: Colors.green),
                        ),
                        Marker(
                          point: LatLng(data!['latitude'], data!['longitude']),
                          width: 40, // ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
                          height: 40, // ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
                          child: Icon(Icons.location_on, color: Colors.green),
                        ),
                      ],
                    ),
                    PolylineLayer(
                      polylines: [
                        Polyline(
                          points: _routePoints.isNotEmpty
                              ? _routePoints
                              : [
                                  LatLng(data!['contractor_latitude'],
                                      data!['contractor_longitude']),
                                  LatLng(data!['latitude'], data!['longitude']),
                                ],
                          strokeWidth: 4,
                          color: Colors.red,
                        ),
                      ],
                    ),
                  ],
                ),
                Positioned(
                  top: 16,
                  right: 16,
                  child: FloatingActionButton(
                    onPressed: () {
                      _openInGoogleMaps(data!['latitude'], data!['longitude']);
                    },
                    backgroundColor: Colors.blue,
                    child: const Icon(Icons.map),
                    tooltip: '‡πÄ‡∏õ‡∏¥‡∏î Google Maps',
                  ),
                ),
                // üìÑ ‡πÅ‡∏ú‡πà‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
                if (_distanceInKm != null)
                  Text(
                      '‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: ${_distanceInKm!.toStringAsFixed(2)} ‡∏Å‡∏°.'),

                DraggableScrollableSheet(
                  initialChildSize: 0.4,
                  minChildSize: 0.2,
                  maxChildSize: 0.85,
                  builder: (context, scrollController) {
                    return Container(
                      decoration: const BoxDecoration(
                        color: Colors.white,
                        borderRadius:
                            BorderRadius.vertical(top: Radius.circular(20)),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black26,
                            blurRadius: 10,
                            offset: Offset(0, -3),
                          )
                        ],
                      ),
                      child: SingleChildScrollView(
                        controller: scrollController,
                        padding: const EdgeInsets.all(16),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Center(
                              child: Container(
                                width: 40,
                                height: 5,
                                margin: const EdgeInsets.only(bottom: 10),
                                decoration: BoxDecoration(
                                  color: Colors.grey[400],
                                  borderRadius: BorderRadius.circular(5),
                                ),
                              ),
                            ),
                            Text(
                              data!['name_rs'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
                              style: const TextStyle(
                                  fontSize: 20, fontWeight: FontWeight.bold),
                            ),
                            const SizedBox(height: 10),
                            Row(
                              children: [
                                const Icon(Icons.person),
                                const SizedBox(width: 5),
                                Text(
                                  data!['employee_username'] ?? '-',
                                  style: const TextStyle(fontSize: 16),
                                ),
                                const Spacer(),
                                ElevatedButton(
                                  onPressed: () {
                                    // TODO: show more info
                                  },
                                  child: const Text('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏à‡πâ‡∏≤‡∏á'),
                                ),
                              ],
                            ),
                            const SizedBox(height: 10),
                            Text(
                              '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${data!['date_start']?.split("T").first ?? "-"} ‡∏ñ‡∏∂‡∏á ${data!['date_end']?.split("T").first ?? "-"}',
                            ),
                            Text(
                              '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: ${data!['area_amount']} ${data!['unit_area']}',
                            ),
                            Text(
                              '‡∏ü‡∏≤‡∏£‡πå‡∏°: ${data!['name_farm']} (${data!['village']}, ${data!['subdistrict']})',
                            ),
                            Text(
                              '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${data!['district']} ‡∏à.${data!['province']}',
                            ),
                            Text(
                                '‡∏£‡∏≤‡∏Ñ‡∏≤: ${data!['price']} ${data!['unit_price']}'),
                            const SizedBox(height: 10),
                            Text('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${data!['detail']}'),
                            const SizedBox(height: 20),
                            Wrap(
                              spacing: 8,
                              runSpacing: 8,
                              alignment: WrapAlignment.center,
                              children: [
                                buildButtons(),
                              ],
                            )
                          ],
                        ),
                      ),
                    );
                  },
                ),
              ],
            ),
    );
  }
}
