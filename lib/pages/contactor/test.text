// üí° ‡∏™‡∏£‡πâ‡∏≤‡∏á widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ "‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô" ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ
  Widget _buildPlanTab() {
    return Column(
      children: [
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
          child: SingleChildScrollView(
            scrollDirection: Axis.horizontal,
            child: Row(
              children: [
                _buildStatusChip('‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', -1),
                _buildStatusChip('‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô', null),
                _buildStatusChip('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á', 1),
                _buildStatusChip('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á', 2),
                _buildStatusChip('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', 3),
                _buildStatusChip('‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', 0),
              ],
            ),
          ),
        ),
        Expanded(
          child: CustomScrollView(
            slivers: [
              SliverToBoxAdapter(
                child: TableCalendar(
                  locale: 'th_TH',
                  focusedDay: _focusedDay,
                  firstDay: DateTime.utc(2020, 1, 1),
                  lastDay: DateTime.utc(2030, 12, 31),
                  startingDayOfWeek: StartingDayOfWeek.monday,
                  selectedDayPredicate: (day) => isSameDay(_selectedDay, day),
                  calendarFormat: _calendarFormat,
                  eventLoader: (day) {
                    final dateKey = DateTime(day.year, day.month, day.day);
                    return eventsByDay[dateKey] ?? [];
                  },
                  onDaySelected: (selectedDay, focusedDay) {
                    setState(() {
                      if (!isSameDay(_selectedDay, selectedDay)) {
                        _selectedDay = selectedDay;
                        _focusedDay = focusedDay;
                      }
                    });
                  },
                  onFormatChanged: (format) {
                    if (_calendarFormat != format) {
                      setState(() {
                        _calendarFormat = format;
                      });
                    }
                  },
                  onPageChanged: (focusedDay) {
                    _focusedDay = focusedDay;
                  },
                  calendarStyle: const CalendarStyle(
                    markerDecoration: BoxDecoration(
                      color: Colors.redAccent,
                      shape: BoxShape.circle,
                    ),
                  ),
                  headerStyle: const HeaderStyle(
                    formatButtonVisible: false,
                    titleCentered: true,
                  ),
                ),
              ),
              const SliverToBoxAdapter(
                child: SizedBox(height: 16),
              ),
              SliverList(
                delegate: SliverChildListDelegate(
                  _buildDailyScheduleList(),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  // üí° ‡∏™‡∏£‡πâ‡∏≤‡∏á widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  Widget _buildStatusChip(String label, int? status) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 4.0),
      child: FilterChip(
        label: Text(label),
        selected: _selectedStatus == status,
        onSelected: (bool selected) {
          setState(() {
            // ‚ö†Ô∏è ‡∏•‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ '!' ‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î Null check error
            _selectedStatus = selected ? status : -1;
          });
        },
        selectedColor: Colors.green[200],
        checkmarkColor: Colors.white,
        labelStyle: TextStyle(
          color: _selectedStatus == status ? Colors.black : Colors.grey[800],
        ),
      ),
    );
  }

  Widget _buildHistoryTab() {
    return FutureBuilder<List<dynamic>>(
      future: _scheduleFuture,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        } else if (snapshot.hasError) {
          return Center(child: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${snapshot.error}'));
        } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
          return const Center(child: Text('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡∏á‡∏≤‡∏ô'));
        }

        final scheduleList = snapshot.data!
            .where((item) => item['progress_status'] == 4)
            .toList();

        if (scheduleList.isEmpty) {
          return const Center(child: Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ'));
        }

        String getStatusText(dynamic status) {
          return '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô';
        }

        Color getStatusColor(dynamic status) {
          return Colors.green;
        }

        return ListView.builder(
          padding: const EdgeInsets.fromLTRB(20, 0, 20, 20),
          itemCount: scheduleList.length,
          itemBuilder: (context, index) {
            final item = scheduleList[index];
            return Container(
              decoration: BoxDecoration(
                color:
                    const Color.fromARGB(255, 255, 255, 255), // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏ó‡∏ô‡πÄ‡∏î‡∏¥‡∏°
                borderRadius: BorderRadius.circular(12), // ‡∏°‡∏∏‡∏°‡πÇ‡∏Ñ‡πâ‡∏á
                boxShadow: [
                  BoxShadow(
                    color: const Color.fromARGB(255, 251, 229, 196)
                        .withOpacity(0.3), // ‡∏™‡∏µ‡πÄ‡∏á‡∏≤
                    spreadRadius: 1, // ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏á‡∏≤
                    blurRadius: 6, // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ü‡∏∏‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏≤
                    offset: const Offset(0, 3), // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏á‡∏≤
                  ),
                ],
              ),

              margin: const EdgeInsets.symmetric(vertical: 8),
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Flexible(
                              child: Text(
                                item['name_rs'] ?? '-',
                                style: const TextStyle(
                                  fontSize: 18,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.black87,
                                ),
                                overflow: TextOverflow.ellipsis,
                                maxLines: 1,
                              ),
                            ),
                            Row(
                              children: [
                                Icon(Icons.circle,
                                    color:
                                        getStatusColor(item['progress_status']),
                                    size: 10),
                                const SizedBox(width: 4),
                                Text(
                                  getStatusText(item['progress_status']),
                                  style: TextStyle(
                                    fontSize: 13,
                                    fontWeight: FontWeight.w500,
                                    color:
                                        getStatusColor(item['progress_status']),
                                  ),
                                ),
                              ],
                            )
                          ],
                        ),
                        const SizedBox(height: 8),
                        // ‡πÉ‡∏ä‡πâ Row + SizedBox ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏±‡∏î‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                        Row(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const SizedBox(
                              width: 65, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
                              child: Row(
                                children: [
                                  Icon(Icons.person,
                                      size: 16, color: Colors.indigo),
                                  SizedBox(width: 6),
                                  Text(
                                    '‡∏ú‡∏π‡πâ‡∏à‡πâ‡∏≤‡∏á:',
                                    style: TextStyle(
                                      fontSize: 14,
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            Expanded(
                              child: Text(
                                '${item['employee_username']} (${item['employee_phone'] ?? '-'})',
                                style: const TextStyle(
                                  fontSize: 14,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        Row(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const SizedBox(
                              width: 65,
                              child: Row(
                                children: [
                                  Icon(Icons.directions_car,
                                      size: 16, color: Colors.blueGrey),
                                  SizedBox(width: 4),
                                  Text(
                                    '‡∏£‡∏ñ:',
                                    style: TextStyle(
                                      fontSize: 14,
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            Expanded(
                              child: Text(
                                item['name_vehicle'] ?? '-',
                                style: const TextStyle(
                                  fontSize: 14,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        Row(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const SizedBox(
                              width: 65,
                              child: Row(
                                children: [
                                  Icon(Icons.location_on,
                                      size: 16, color: Colors.orange),
                                  SizedBox(width: 4),
                                  Text(
                                    '‡∏ó‡∏µ‡πà‡∏ô‡∏≤:',
                                    style: TextStyle(
                                      fontSize: 14,
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            Expanded(
                              child: Text(
                                '${item['name_farm'] ?? ''} (‡∏ï.${item['subdistrict'] ?? ''} ‡∏≠.${item['district'] ?? ''} ‡∏à.${item['province'] ?? ''})',
                                style: const TextStyle(
                                  fontSize: 14,
                                ),
                                maxLines: 1, // ‡∏à‡∏≥‡∏Å‡∏±‡∏î 1 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
                                overflow: TextOverflow
                                    .ellipsis, // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á ‡∏ï‡∏±‡∏î‡∏î‡πâ‡∏ß‡∏¢ ...
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),

                    const Divider(
                      color: Colors.grey,
                      thickness: 1,
                      height: 24,
                    ),
                    Row(
                      children: [
                        const SizedBox(
                          width: 65,
                          child: Text(
                            '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á:',
                            style: TextStyle(
                              fontSize: 13,
                              fontWeight: FontWeight.bold,
                              color: Colors.grey, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÄ‡∏ó‡∏≤
                            ),
                          ),
                        ),
                        Text(
                          formatDateReserveThai(item['date_reserve']),
                          style: const TextStyle(
                            fontSize: 13,
                            color: Colors.grey, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÄ‡∏ó‡∏≤
                          ),
                        ),
                      ],
                    ),

                    Row(
                      children: [
                        const SizedBox(
                          width: 65,
                          child: Text(
                            '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô:',
                            style: TextStyle(
                                fontSize: 13, fontWeight: FontWeight.bold),
                          ),
                        ),
                        Text(
                          formatDateReserveThai(
                              item['date_start']), // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö 1 ‡∏ï‡∏±‡∏ß
                          style: const TextStyle(fontSize: 13),
                        ),
                      ],
                    ),
                    Row(
                      children: [
                        const SizedBox(
                          width: 65,
                          child: Text(
                            '‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î:',
                            style: TextStyle(
                                fontSize: 13, fontWeight: FontWeight.bold),
                          ),
                        ),
                        Text(
                          formatDateReserveThai(
                              item['date_end']), // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö 1 ‡∏ï‡∏±‡∏ß
                          style: const TextStyle(fontSize: 13),
                        ),
                      ],
                    ),
                    const Divider(
                      color: Colors.grey,
                      thickness: 1,
                      height: 24,
                    ),
                    const SizedBox(height: 8),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        ElevatedButton(
                          style: ElevatedButton.styleFrom(
                            backgroundColor: const Color(0xFF4CAF50),
                            foregroundColor: Colors.white,
                            elevation: 4,
                            shadowColor:
                                const Color.fromARGB(208, 163, 160, 160),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(16),
                            ),
                            padding: const EdgeInsets.symmetric(
                                horizontal: 24, vertical: 10),
                            textStyle: const TextStyle(
                              fontSize: 14,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                          onPressed: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder: (context) =>
                                    DetailWorkPage(rsid: item['rsid']),
                              ),
                            );
                          },
                          child: const Text('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            );
          },
        );
      },
    );
  }