import 'dart:convert';
import 'package:agri_booking2/main.dart';
import 'package:agri_booking2/pages/employer/ProfileCon.dart';
import 'package:another_flushbar/flushbar.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';
import 'package:latlong2/latlong.dart';
import 'package:url_launcher/url_launcher.dart';

class DetailReserving extends StatefulWidget {
  final int rsid;
  const DetailReserving({super.key, required this.rsid});
  @override
  State<DetailReserving> createState() => _DetailReservingState();
}

class _DetailReservingState extends State<DetailReserving> {
  Map<String, dynamic>? data;
  int? progress_status; // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô null
  List<LatLng> _routePoints = [];
  double? _distanceInKm;
  Map<String, dynamic>? vehicleData;
  bool isLoading = true;
  String? error;
  @override
  void initState() {
    super.initState();
    fetchDetail();
  }

  void _handleMessage(RemoteMessage message) {
    if (message.data.containsKey('rsid')) {
      final rsidStr = message.data['rsid'];
      final rsid = int.tryParse(rsidStr ?? '') ?? 0;

      navigatorKey.currentState?.push(
        MaterialPageRoute(
          builder: (context) => DetailReserving(rsid: rsid),
        ),
      );
    }
  }

  Future<void> fetchVehicleDetail() async {
    setState(() {
      isLoading = true; // ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î
      error = null; // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤
    });
    try {
      // --- ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡∏ä‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á Flutter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà ---
      PaintingBinding.instance.imageCache.clear();
      PaintingBinding.instance.imageCache.clearLiveImages();
      final url = Uri.parse(
          'http://projectnodejs.thammadalok.com/AGribooking/get_vid/${data!['vid']}');
      final response = await http.get(url);

      if (response.statusCode == 200) {
        final List data = jsonDecode(response.body);
        if (data.isNotEmpty) {
          setState(() {
            vehicleData = data[0];
            isLoading = false;
          });
        } else {
          setState(() {
            error = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ';
            isLoading = false;
          });
        }
      } else {
        setState(() {
          error = '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.statusCode}';
          isLoading = false; // ‡πÅ‡∏à‡πâ‡∏á error ‡∏Å‡∏±‡∏ö review future ‡∏î‡πâ‡∏ß‡∏¢
        });
      }
    } catch (e) {
      setState(() {
        error = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: $e';
        isLoading = false; // ‡πÅ‡∏à‡πâ‡∏á error ‡∏Å‡∏±‡∏ö review future ‡∏î‡πâ‡∏ß‡∏¢
      });
    }
  }

  Future<void> fetchDetail() async {
    final url = Uri.parse(
        'http://projectnodejs.thammadalok.com/AGribooking/get_DetailReserving/${widget.rsid}');
    final response = await http.get(url);
    print(response);
    if (response.statusCode == 200) {
      final List<dynamic> jsonList = jsonDecode(response.body);
      setState(() {
        data = jsonList.first;
        progress_status = data!['progress_status'];
      });

      // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å ORS
      try {
        final route = await getRouteFromORS(
          data!['contractor_latitude'],
          data!['contractor_longitude'],
          data!['latitude'],
          data!['longitude'],
        );
        setState(() {
          _routePoints = route;
        });
      } catch (e) {
        print('Error loading route: $e');
        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏à‡∏∞‡∏¢‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡πá‡πÑ‡∏î‡πâ
      }
    }
  }

  //‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  Widget _statusButton(int statusValue, String label) {
    final bool isSelected = progress_status == statusValue;

    return ElevatedButton(
      onPressed: () => _updateProgress(statusValue),
      style: ElevatedButton.styleFrom(
        backgroundColor: isSelected ? Colors.green : Colors.grey[300],
        foregroundColor: isSelected ? Colors.white : Colors.black87,
      ),
      child: Text(label),
    );
  }

  Future<void> _updateProgress(int newStatus) async {
    // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) {
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        String getStatusText(int status) {
          switch (status) {
            case 2:
              return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏°‡∏≤';
            case 3:
              return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô';
            case 4:
              return '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢';
            default:
              return '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å ($status)';
          }
        }

        return AlertDialog(
          title: const Center(
            child: Text(
              '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
              style: TextStyle(
                fontWeight: FontWeight.bold,
                fontSize: 20,
                color: Colors.indigo, // ‡∏™‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏™‡∏ß‡∏¢‡πÜ
                letterSpacing: 1, // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
              ),
            ),
          ),
          content: Text(
            '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "${getStatusText(newStatus)}" ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
            textAlign: TextAlign.center,
            style: const TextStyle(fontSize: 16),
          ),
          actionsAlignment: MainAxisAlignment.center,
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: const Text(
                '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
                style: TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.w600,
                  color: Colors.redAccent,
                ),
              ),
            ),
            SizedBox(width: 50),
            TextButton(
              onPressed: () => Navigator.of(context).pop(true),
              child: const Text(
                '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
                style: TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.w600,
                  color: Colors.green,
                ),
              ),
            ),
          ],
        );
      },
    );

    if (confirmed != true) return;

    final url = Uri.parse(
        'http://projectnodejs.thammadalok.com/AGribooking/update_progress');
    try {
      final response = await http.put(
        url,
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'rsid': widget.rsid, 'progress_status': newStatus}),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);

        Flushbar(
          message: data['message'] ?? '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
          icon: const Icon(Icons.check_circle, color: Colors.white),
          duration: const Duration(seconds: 3),
          backgroundColor: Colors.green,
          margin: const EdgeInsets.all(16),
          borderRadius: BorderRadius.circular(12),
          flushbarPosition: FlushbarPosition.TOP, // ‚≠ê ‡πÅ‡∏™‡∏î‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
          animationDuration: const Duration(milliseconds: 500),
          messageSize: 16,
        ).show(context);

        // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤
        await fetchDetail(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e')),
      );
    }
  }

  Future<List<LatLng>> getRouteFromORS(
    double startLat,
    double startLng,
    double endLat,
    double endLng,
  ) async {
    final apiKey =
        'eyJvcmciOiI1YjNjZTM1OTc4NTExMTAwMDFjZjYyNDgiLCJpZCI6ImMyOWE5ZDkxMmUyZDQzMDc4ODNlZWQ0MjQzZDQ2NTk1IiwiaCI6Im11cm11cjY0In0='; // <-- ‡πÉ‡∏™‡πà API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    final url = Uri.parse(
      'https://api.openrouteservice.org/v2/directions/driving-car?api_key=$apiKey&start=$startLng,$startLat&end=$endLng,$endLat',
    );

    final response = await http.get(url);
    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);

      // üìç ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å response (‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏ï‡∏£)
      final distanceMeters =
          data['features'][0]['properties']['segments'][0]['distance'];
      setState(() {
        _distanceInKm = (distanceMeters / 1000); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
      });

      // üìç ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
      List coords = data['features'][0]['geometry']['coordinates'];
      return coords.map<LatLng>((c) => LatLng(c[1], c[0])).toList();
    } else {
      throw Exception('Failed to load route from ORS');
    }
  }

  String _formatDateRange(String? startDate, String? endDate) {
    if (startDate == null ||
        startDate.isEmpty ||
        endDate == null ||
        endDate.isEmpty) {
      return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà';
    }

    try {
      final startUtc = DateTime.parse(startDate);
      final endUtc = DateTime.parse(endDate);

      final startThai = startUtc.toUtc().add(const Duration(hours: 7));
      final endThai = endUtc.toUtc().add(const Duration(hours: 7));

      final formatter = DateFormat('dd/MM/yyyy ‡πÄ‡∏ß‡∏•‡∏≤ HH:mm ‡∏ô.');

      return '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô: ${formatter.format(startThai)}\n‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: ${formatter.format(endThai)}';
    } catch (e) {
      return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        //backgroundColor: const Color.fromARGB(255, 255, 158, 60),
        backgroundColor: const Color.fromARGB(255, 18, 143, 9),
        centerTitle: true,
        //automaticallyImplyLeading: false,
        title: const Text(
          '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô',
          style: TextStyle(
            fontSize: 22,
            fontWeight: FontWeight.bold,
            color: Colors.white,
            shadows: [
              Shadow(
                color: Color.fromARGB(115, 253, 237, 237),
                blurRadius: 3,
                offset: Offset(1.5, 1.5),
              ),
            ],
          ),
        ),
        leading: IconButton(
          color: Colors.white,
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.pop(context); // ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
          },
        ),
      ),
      body: data == null
          ? const Center(child: CircularProgressIndicator())
          : Stack(
              children: [
                // üó∫ ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á
                FlutterMap(
                  options: MapOptions(
                    center: LatLng(data!['latitude'], data!['longitude']),
                    zoom: 14,
                  ),
                  children: [
                    TileLayer(
                      urlTemplate:
                          'https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
                      subdomains: ['a', 'b', 'c'],
                      userAgentPackageName: 'com.example.yourapp',
                    ),
                    // MarkerLayer(
                    //   markers: [
                    //     Marker(
                    //       point: LatLng(data!['contractor_latitude'],
                    //           data!['contractor_longitude']),
                    //       width: 40, // ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
                    //       height: 40, // ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
                    //       child: const Column(
                    //         children: [
                    //           Text('‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á',
                    //               style: TextStyle(
                    //                   color: Colors.white,
                    //                   backgroundColor: Colors.green)),
                    //           Icon(Icons.person_pin_circle,
                    //               color: Colors.green, size: 40),
                    //         ],
                    //       ),
                    //     ),
                    //     Marker(
                    //       point: LatLng(data!['latitude'], data!['longitude']),
                    //       width: 40, // ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
                    //       height: 40, // ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
                    //       child: const Column(
                    //         children: [
                    //           Text('‡∏ú‡∏π‡πâ‡∏à‡πâ‡∏≤‡∏á',
                    //               style: TextStyle(
                    //                   color: Colors.white,
                    //                   backgroundColor: Colors.green)),
                    //           Icon(Icons.person_pin_circle,
                    //               color: Colors.green, size: 40),
                    //         ],
                    //       ),
                    //     ),
                    //   ],
                    // ),

                    //‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà
                    MarkerLayer(
                      markers: [
                        Marker(
                          point: LatLng(data!['contractor_latitude'],
                              data!['contractor_longitude']),
                          width: 100,
                          height: 60,
                          child: Column(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Container(
                                padding: const EdgeInsets.symmetric(
                                    horizontal: 6, vertical: 2),
                                decoration: BoxDecoration(
                                  color: Colors.green.withOpacity(0.8),
                                  borderRadius: BorderRadius.circular(8),
                                ),
                                child: const Text(
                                  '‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á',
                                  style: TextStyle(
                                      color: Colors.white, fontSize: 12),
                                ),
                              ),
                              const Icon(Icons.person_pin_circle,
                                  color: Colors.green, size: 32),
                            ],
                          ),
                        ),
                        Marker(
                          point: LatLng(data!['latitude'], data!['longitude']),
                          width: 100,
                          height: 60,
                          child: Column(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Container(
                                padding: const EdgeInsets.symmetric(
                                    horizontal: 6, vertical: 2),
                                decoration: BoxDecoration(
                                  color: Colors.orange.withOpacity(0.8),
                                  borderRadius: BorderRadius.circular(8),
                                ),
                                child: const Text(
                                  '‡∏ú‡∏π‡πâ‡∏à‡πâ‡∏≤‡∏á',
                                  style: TextStyle(
                                      color: Colors.white, fontSize: 12),
                                ),
                              ),
                              const Icon(Icons.person_pin_circle,
                                  color: Colors.orange, size: 32),
                            ],
                          ),
                        ),
                      ],
                    ),

                    PolylineLayer(
                      polylines: [
                        Polyline(
                          points: _routePoints.isNotEmpty
                              ? _routePoints
                              : [
                                  LatLng(data!['contractor_latitude'],
                                      data!['contractor_longitude']),
                                  LatLng(data!['latitude'], data!['longitude']),
                                ],
                          strokeWidth: 4,
                          color: Colors.red,
                        ),
                      ],
                    ),
                  ],
                ),

                //‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤google maps

                // Positioned(
                //   top: 16,
                //   right: 16,
                //   child: FloatingActionButton(
                //     onPressed: () {
                //       _openInGoogleMaps(data!['latitude'], data!['longitude']);
                //     },
                //     backgroundColor: Colors.blue,
                //     child: const Icon(Icons.map),
                //     tooltip: '‡πÄ‡∏õ‡∏¥‡∏î Google Maps',
                //   ),
                // ),

                // üìÑ ‡πÅ‡∏ú‡πà‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
                if (_distanceInKm != null)
                  Text(
                      '‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: ${_distanceInKm!.toStringAsFixed(2)} ‡∏Å‡∏°.'),

                //‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
                DraggableScrollableSheet(
                  initialChildSize: 0.4,
                  minChildSize: 0.2,
                  maxChildSize: 0.85,
                  builder: (context, scrollController) {
                    // ‡πÅ‡∏õ‡∏•‡∏á progress_status ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                    String getStatusText(dynamic status) {
                      switch (status.toString()) {
                        case '0':
                          return '‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô';
                        case '1':
                          return '‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á';
                        case '2':
                          return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á';
                        case '3':
                          return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô';
                        case '4':
                          return '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô';
                        default:
                          return '‡∏£‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á';
                      }
                    }

                    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                    Color getStatusColor(dynamic status) {
                      switch (status.toString()) {
                        case '0':
                          return Colors.red;
                        case '1':
                          return Colors.blueGrey;
                        case '2':
                          return Colors.pinkAccent;
                        case '3':
                          return Colors.amber;
                        case '4':
                          return Colors.green;
                        default:
                          return Colors.black45;
                      }
                    }

                    return Container(
                      decoration: const BoxDecoration(
                        gradient: LinearGradient(
                          begin: Alignment.topCenter,
                          end: Alignment.bottomCenter,
                          colors: [
                            Color.fromARGB(255, 255, 222, 122), // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏°
                            Color.fromARGB(255, 255, 251, 236), // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô
                            Color.fromARGB(255, 253, 253, 252)
                          ],
                        ),
                        borderRadius: BorderRadius.vertical(
                          top: Radius.circular(20),
                        ),
                      ),
                      child: SingleChildScrollView(
                        controller: scrollController,
                        padding: const EdgeInsets.all(16),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Center(
                              child: Container(
                                width: 40,
                                height: 5,
                                margin: const EdgeInsets.only(bottom: 10),
                                decoration: BoxDecoration(
                                  color: Colors.grey[400],
                                  borderRadius: BorderRadius.circular(5),
                                ),
                              ),
                            ),
                            //‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô
                            Align(
                              alignment: Alignment.centerRight,
                              child: Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  Icon(
                                    Icons.circle,
                                    color: getStatusColor(
                                        data!['progress_status']),
                                    size: 10,
                                  ),
                                  const SizedBox(width: 4),
                                  Text(
                                    getStatusText(data!['progress_status']),
                                    style: TextStyle(
                                      fontSize: 14,
                                      fontWeight: FontWeight.w500,
                                      color: getStatusColor(
                                          data!['progress_status']),
                                    ),
                                  ),
                                ],
                              ),
                            ),

                            // ‡∏™‡πà‡∏ß‡∏ô Center -> Column
                            Center(
                              child: Column(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  // ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô + ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏ñ (‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
                                  Row(
                                    mainAxisSize: MainAxisSize.min,
                                    crossAxisAlignment:
                                        CrossAxisAlignment.center,
                                    children: [
                                      // ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô
                                      Text(
                                        data!['name_rs'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
                                        style: const TextStyle(
                                          fontSize: 20,
                                          fontWeight: FontWeight.bold,
                                        ),
                                      ),
                                      const SizedBox(width: 10),
                                    ],
                                  ),

                                  const SizedBox(height: 10),

                                  // ‡∏£‡∏π‡∏õ‡∏£‡∏ñ
                                  ClipRRect(
                                    borderRadius: BorderRadius.circular(8),
                                    child: data!['image'] != null &&
                                            data!['image'].toString().isNotEmpty
                                        ? Image.network(
                                            data!['image'],
                                            height: 140,
                                            width: 140,
                                            fit: BoxFit.cover,
                                            errorBuilder:
                                                (context, error, stackTrace) =>
                                                    Container(
                                              height: 140,
                                              width: 140,
                                              color: Colors.grey[300],
                                              alignment: Alignment.center,
                                              child: const Icon(
                                                  Icons.broken_image,
                                                  size: 48),
                                            ),
                                          )
                                        : Container(
                                            height: 140,
                                            width: 140,
                                            color: Colors.grey[200],
                                            alignment: Alignment.center,
                                            child: const Icon(
                                                Icons.image_not_supported,
                                                size: 48),
                                          ),
                                  ),
                                  Text(
                                    '‡∏£‡∏ñ: ${data!['name_vehicle']}',
                                  ),
                                  Text(
                                    '‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ: ${data!['plate_number'] != null && data!['plate_number'].toString().isNotEmpty ? data!['plate_number'] : '‡πÑ‡∏°‡πà‡∏°‡∏µ'}',
                                  ),
                                ],
                              ),
                            ),

                            const SizedBox(height: 10),
                            Row(
                              children: [
                                // ‡∏£‡∏π‡∏õ‡∏ú‡∏π‡πâ‡∏à‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
                                data!['contractor_image'] != null &&
                                        data!['contractor_image'] != ''
                                    ? CircleAvatar(
                                        radius: 25,
                                        backgroundImage: NetworkImage(
                                            data!['contractor_image']),
                                        backgroundColor: const Color.fromARGB(
                                            255, 238, 238, 238),
                                      )
                                    : const CircleAvatar(
                                        radius: 25,
                                        backgroundColor: Colors.amber,
                                        child: Icon(
                                          Icons.person,
                                          size: 30,
                                          color: Colors.white,
                                        ),
                                      ),

                                const SizedBox(width: 8),

                                // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡πâ‡∏≤‡∏á
                                Text(
                                  data!['contractor_username'] ?? '-',
                                  style: const TextStyle(fontSize: 16),
                                ),
                                const Spacer(),

                                // ‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏à‡πâ‡∏≤‡∏á
                                ElevatedButton(
                                  child: const Text('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á'),
                                  onPressed: () {
                                    Navigator.push(
                                      context,
                                      MaterialPageRoute(
                                        builder: (context) => ProfileCon(
                                          mid_con: data!['contractor_mid'] ?? 0,
                                          mid_emp: data!['mid'] ?? 0,
                                          farm: data!['farm'] ?? {},
                                        ),
                                      ),
                                    );
                                  },
                                ),
                              ],
                            ),

                            //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô
                            const SizedBox(height: 16),
                            Row(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Icon(Icons.access_time, size: 16),
                                const SizedBox(width: 4),
                                Expanded(
                                  child: Text(
                                    _formatDateRange(
                                      data!['date_start'],
                                      data!['date_end'],
                                    ),
                                    style: const TextStyle(
                                      fontSize: 13,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                            const SizedBox(height: 5),
                            Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const SizedBox(height: 10),

                                // ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
                                Row(
                                  children: [
                                    const Icon(Icons.landscape,
                                        size: 18, color: Colors.green),
                                    const SizedBox(width: 8),
                                    Text(
                                      '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: ${data!['area_amount']} ${data!['unit_area']}',
                                      style: const TextStyle(fontSize: 15),
                                    ),
                                  ],
                                ),
                                const SizedBox(height: 6),

                                // ‡∏ü‡∏≤‡∏£‡πå‡∏°
                                Row(
                                  children: [
                                    const Icon(Icons.agriculture,
                                        size: 18, color: Colors.brown),
                                    const SizedBox(width: 8),
                                    Expanded(
                                      child: Text(
                                        '‡∏ó‡∏µ‡πà‡∏ô‡∏≤: ${data!['name_farm']} (${data!['village']}, ${data!['subdistrict']})',
                                        style: const TextStyle(fontSize: 15),
                                      ),
                                    ),
                                  ],
                                ),
                                const SizedBox(height: 6),

                                // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
                                Row(
                                  children: [
                                    const Icon(Icons.location_on,
                                        size: 18, color: Colors.redAccent),
                                    const SizedBox(width: 8),
                                    Expanded(
                                      child: Text(
                                        '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${data!['district']} ‡∏à.${data!['province']}',
                                        style: const TextStyle(fontSize: 15),
                                      ),
                                    ),
                                  ],
                                ),
                                const SizedBox(height: 6),

                                // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
                                Row(
                                  children: [
                                    const Icon(Icons.phone,
                                        size: 18, color: Colors.blue),
                                    const SizedBox(width: 8),
                                    Text(
                                      '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${data!['employee_phone']}',
                                      style: const TextStyle(fontSize: 15),
                                    ),
                                  ],
                                ),
                                const SizedBox(height: 6),

                                // ‡∏£‡∏≤‡∏Ñ‡∏≤
                                Row(
                                  children: [
                                    const Icon(Icons.attach_money,
                                        size: 18, color: Colors.orange),
                                    const SizedBox(width: 8),
                                    Text(
                                      '‡∏£‡∏≤‡∏Ñ‡∏≤: ${data!['price']} ${data!['unit_price']}',
                                      style: const TextStyle(fontSize: 15),
                                    ),
                                  ],
                                ),
                                const SizedBox(height: 12),

                                // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                                Row(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    const Icon(Icons.notes,
                                        size: 18, color: Colors.deepPurple),
                                    const SizedBox(width: 8),
                                    Expanded(
                                      child: Text(
                                        '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${data!['detail']}',
                                        style: const TextStyle(fontSize: 15),
                                      ),
                                    ),
                                  ],
                                ),
                              ],
                            ),
                            const Divider(
                              color: Colors.grey, // ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô
                              thickness: 1, // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤
                              height: 20, // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ö‡πÄ‡∏™‡πâ‡∏ô
                            ),

                            const SizedBox(height: 10),
                          ],
                        ),
                      ),
                    );
                  },
                ),
              ],
            ),
    );
  }
}
